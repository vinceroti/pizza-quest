// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique
  email         String             @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  pizzaRatings  PizzaSliceRating[]
  Comment       Comment[]
  Like          Like[]
}


model PizzaSliceRating {
  id                  Int       @id @default(autoincrement())
  pizzaPlaceId        String
  pizzaPlace          PizzaPlace @relation(fields: [pizzaPlaceId], references: [id])
  overall             Float
  crustDough          Float
  sauce               Float
  toppingToPizzaRatio Float
  creativity          Float
  authenticity        Float
  notes               String?
  image               String? // URL to s3 bucket image
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              Int
  user                User      @relation(fields: [userId], references: [id])
  comments            Comment[]
  likes               Like[]
}

model PizzaPlace {
  id                  String   @id
  description         String
  mainText            String
  secondaryText       String
  pizzaSliceRatings   PizzaSliceRating[]
}

model Comment {
  id                 Int              @id @default(autoincrement())
  text               String
  createdAt          DateTime         @default(now())
  pizzaSliceRatingId Int
  pizzaSliceRating   PizzaSliceRating @relation(fields: [pizzaSliceRatingId], references: [id])
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
}

model Like {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  pizzaSliceRatingId Int
  pizzaSliceRating   PizzaSliceRating @relation(fields: [pizzaSliceRatingId], references: [id])
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
}
